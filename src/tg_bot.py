import os
import traceback
from urllib.error import HTTPError
from functools import wraps
from enum import Enum
import re
from datetime import datetime
from collections import defaultdict
import math

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, ConversationHandler
from telegram.constants import ParseMode

from src import flib
from src import database as db
from src.custom_logging import get_logger

logger = get_logger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
ALLOWED_USERS = os.getenv('ALLOWED_USERS', '').split(',')
ALLOWED_USERS = [user_id.strip() for user_id in ALLOWED_USERS if user_id.strip()]

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
BOOKS_PER_PAGE = 10
FAVORITES_PER_PAGE = 10

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
class SearchState(Enum):
    WAITING_TITLE = 1
    WAITING_AUTHOR = 2
    WAITING_COMBINED = 3


def check_access(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    @wraps(func)
    async def wrapper(update: Update, context: CallbackContext):
        user_id = str(update.effective_user.id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        db.add_or_update_user(
            user_id=user_id,
            username=update.effective_user.username,
            full_name=update.effective_user.full_name,
            is_admin=(ALLOWED_USERS and user_id == ALLOWED_USERS[0])
        )
        
        if not ALLOWED_USERS:
            return await func(update, context)
        
        if user_id not in ALLOWED_USERS:
            logger.warning(
                msg="Unauthorized access attempt",
                extra={
                    "user_id": user_id,
                    "user_name": update.effective_user.name,
                    "user_full_name": update.effective_user.full_name,
                }
            )
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
            )
            return
        
        return await func(update, context)
    
    return wrapper


def check_callback_access(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ callback –∑–∞–ø—Ä–æ—Å–∞—Ö"""
    @wraps(func)
    async def wrapper(update: Update, context: CallbackContext):
        user_id = str(update.effective_user.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.add_or_update_user(
            user_id=user_id,
            username=update.effective_user.username,
            full_name=update.effective_user.full_name
        )
        
        if not ALLOWED_USERS:
            return await func(update, context)
        
        if user_id not in ALLOWED_USERS:
            logger.warning(
                msg="Unauthorized callback access attempt",
                extra={
                    "user_id": user_id,
                    "user_name": update.effective_user.name,
                    "user_full_name": update.effective_user.full_name,
                }
            )
            query = update.callback_query
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É", show_alert=True)
            return
        
        return await func(update, context)
    
    return wrapper


async def show_main_menu_text(update: Update, context: CallbackContext, is_start: bool = True):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user_name = update.effective_user.first_name or "–ö–Ω–∏–≥–æ–ª—é–±"
    user_id = str(update.effective_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_stats = db.get_user_stats(user_id)
    favorites_count = user_stats.get('favorites_count', 0)
    search_count = user_stats.get('user_info', {}).get('search_count', 0)
    download_count = user_stats.get('user_info', {}).get('download_count', 0)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–∞–Ω–¥—ã
    if is_start:
        greeting = f"üëã *–ü—Ä–∏–≤–µ—Ç, {user_name}!*\n\nüìö *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É Flibusta!*"
    else:
        greeting = "üìã *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞*"
    
    help_text = f"""
{greeting}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
*üìä –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìñ –ü–æ–∏—Å–∫–æ–≤: {search_count}
üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–π: {download_count}
‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {favorites_count}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
*üîç –ö–û–ú–ê–ù–î–´ –ü–û–ò–°–ö–ê*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìñ /title `–Ω–∞–∑–≤–∞–Ω–∏–µ` - –ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
üë§ /author `—Ñ–∞–º–∏–ª–∏—è` - –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥ –∞–≤—Ç–æ—Ä–∞
üéØ /exact `–Ω–∞–∑–≤–∞–Ω–∏–µ | –∞–≤—Ç–æ—Ä` - —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏
üÜî /id `–Ω–æ–º–µ—Ä` - –ø–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É –ø–æ ID
üîç /search - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
*‚≠ê –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚≠ê /favorites - –º–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏
üìú /history - –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞
üì• /downloads - –∏—Å—Ç–æ—Ä–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
‚öôÔ∏è /settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
üìä /mystats - –º–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
*‚ÑπÔ∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìã /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é
üë• /users - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∞–¥–º–∏–Ω)
üìä /stats - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∞–¥–º–∏–Ω)

_–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã!_
    """
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [
            InlineKeyboardButton("üìñ –ü–æ–∏—Å–∫ –∫–Ω–∏–≥", callback_data="menu_search"),
            InlineKeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="show_favorites_1")
        ],
        [
            InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="show_history"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_my_stats")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="show_settings")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        help_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )


@check_access
async def start_callback(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    await show_main_menu_text(update, context, is_start=True)


@check_access
async def help_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await show_main_menu_text(update, context, is_start=False)

@check_access
async def search_by_title(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–Ω–∏–≥–∏"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n"
            "–ü—Ä–∏–º–µ—Ä: `/title –ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞`",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    title = ' '.join(context.args)
    user_id = str(update.effective_user.id)
    
    logger.info(
        msg="search by title",
        extra={
            "command": "search_by_title",
            "user_id": user_id,
            "user_name": update.effective_user.name,
            "title": title,
        }
    )
    
    mes = await update.message.reply_text("üîç –ò—â—É –∫–Ω–∏–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...")
    
    try:
        books = flib.scrape_books_by_title(title)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞
        db.add_search_history(user_id, "title", title, len(books) if books else 0)
        
        if not books:
            await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)
            await update.message.reply_text(
                f"üòî –ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{title}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        context.user_data['search_results'] = books
        context.user_data['search_type'] = 'title'
        context.user_data['search_query'] = title
        
        await show_books_page(books, update, context, mes, page=1)
        
    except Exception as e:
        await handle_error(e, update, context, mes)

# –ó–∞–º–µ–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é search_by_author –≤ tg_bot.py –Ω–∞ —ç—Ç—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é:

@check_access
async def search_by_author(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n"
            "–ü—Ä–∏–º–µ—Ä: `/author –¢–æ–ª—Å—Ç–æ–π`",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    author = ' '.join(context.args)
    user_id = str(update.effective_user.id)
    
    logger.info(
        msg="search by author",
        extra={
            "command": "search_by_author", 
            "user_id": user_id,
            "user_name": update.effective_user.name,
            "author": author,
        }
    )
    
    mes = await update.message.reply_text("üîç –ò—â—É –∫–Ω–∏–≥–∏ –∞–≤—Ç–æ—Ä–∞...")
    
    try:
        authors_books = flib.scrape_books_by_author(author)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        if not authors_books or len(authors_books) == 0:
            db.add_search_history(user_id, "author", author, 0)
            await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)
            await update.message.reply_text(
                f"üòî –ê–≤—Ç–æ—Ä ¬´{author}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é"
            )
            return
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏
        all_books = []
        for author_books in authors_books:
            if author_books:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
                all_books.extend(author_books)
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∫–Ω–∏–≥ –Ω–µ—Ç
        if not all_books:
            db.add_search_history(user_id, "author", author, 0)
            await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)
            await update.message.reply_text(
                f"üòî –£ –∞–≤—Ç–æ—Ä–∞ ¬´{author}¬ª –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥."
            )
            return
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_books = {}
        for book in all_books:
            if book and hasattr(book, 'id'):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç –∫–Ω–∏–≥–∏ –≤–∞–ª–∏–¥–Ω—ã–π
                if book.id not in unique_books:
                    unique_books[book.id] = book
        
        books_list = list(unique_books.values())
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–∏–≥–∏
        if books_list:
            books_list.sort(key=lambda x: x.title if hasattr(x, 'title') else '')
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        db.add_search_history(user_id, "author", author, len(books_list))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        context.user_data['search_results'] = books_list
        context.user_data['search_type'] = 'author'
        context.user_data['search_query'] = author
        
        await show_books_page(books_list, update, context, mes, page=1)
        
    except Exception as e:
        logger.error(f"Error in search_by_author: {e}")
        await handle_error(e, update, context, mes)

@check_access
async def search_exact(update: Update, context: CallbackContext) -> None:
    """–¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å |\n"
            "–ü—Ä–∏–º–µ—Ä: `/exact –í–æ–π–Ω–∞ –∏ –º–∏—Ä | –¢–æ–ª—Å—Ç–æ–π`",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    search_text = ' '.join(context.args)
    user_id = str(update.effective_user.id)
    
    if '|' not in search_text:
        await update.message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å | –º–µ–∂–¥—É –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –∞–≤—Ç–æ—Ä–æ–º\n"
            "–ü—Ä–∏–º–µ—Ä: `/exact –ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ | –ë—É–ª–≥–∞–∫–æ–≤`",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    parts = search_text.split('|')
    title = parts[0].strip()
    author = parts[1].strip()
    
    logger.info(
        msg="exact search",
        extra={
            "command": "search_exact",
            "user_id": user_id,
            "user_name": update.effective_user.name,
            "title": title,
            "author": author,
        }
    )
    
    mes = await update.message.reply_text("üîç –í—ã–ø–æ–ª–Ω—è—é —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫...")
    
    try:
        books = flib.scrape_books_mbl(title, author)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        db.add_search_history(user_id, "exact", f"{title} | {author}", len(books) if books else 0)
        
        if not books:
            await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)
            await update.message.reply_text(
                f"üòî –ö–Ω–∏–≥–∞ ¬´{title}¬ª –∞–≤—Ç–æ—Ä–∞ ¬´{author}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /title –∏–ª–∏ /author –¥–ª—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        context.user_data['search_results'] = books
        context.user_data['search_type'] = '—Ç–æ—á–Ω–æ–º—É –ø–æ–∏—Å–∫—É'
        context.user_data['search_query'] = f"{title} | {author}"
        
        await show_books_page(books, update, context, mes, page=1)
        
    except Exception as e:
        await handle_error(e, update, context, mes)


@check_access
async def search_by_id(update: Update, context: CallbackContext) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É –ø–æ ID"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∫–Ω–∏–≥–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n"
            "–ü—Ä–∏–º–µ—Ä: `/id 123456`",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    book_id = context.args[0]
    user_id = str(update.effective_user.id)
    
    if not book_id.isdigit():
        await update.message.reply_text(
            "‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º\n"
            "–ü—Ä–∏–º–µ—Ä: `/id 123456`",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    logger.info(
        msg="search by id",
        extra={
            "command": "search_by_id",
            "user_id": user_id,
            "user_name": update.effective_user.name,
            "book_id": book_id,
        }
    )
    
    mes = await update.message.reply_text("üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached_book = db.get_cached_book(book_id)
        if cached_book:
            book = flib.Book(book_id)
            book.title = cached_book['title']
            book.author = cached_book['author']
            book.link = cached_book['link']
            book.formats = cached_book['formats']
            book.cover = cached_book['cover']
            book.size = cached_book['size']
        else:
            book = flib.get_book_by_id(book_id)
            if book:
                db.cache_book(book)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        db.add_search_history(user_id, "id", book_id, 1 if book else 0)
        
        if not book:
            await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)
            await update.message.reply_text(f"üòî –ö–Ω–∏–≥–∞ —Å ID {book_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π
        temp_update = update
        temp_update.callback_query = None  # –û—á–∏—â–∞–µ–º callback_query —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await show_book_details_with_favorite(book_id, temp_update, context)
        
    except Exception as e:
        await handle_error(e, update, context, mes)


@check_access
async def universal_search(update: Update, _: CallbackContext):
    """–°—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    await update.message.reply_text(
        "üîç *–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∞) –ò–õ–ò –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∞–≤—Ç–æ—Ä–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.\n"
        "\n"
        "*–ü—Ä–∏–º–µ—Ä:*\n"
        "```\n"
        "1984\n"
        "–û—Ä—É—ç–ª–ª\n"
        "```\n"
        "\nüí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:\n"
        "‚Ä¢ /title - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "‚Ä¢ /author - –ø–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É\n"
        "‚Ä¢ /exact - —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫",
        parse_mode=ParseMode.MARKDOWN
    )

@check_access
async def find_the_book(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –∫–∞–∫ –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π
    if update.message.text.startswith('/'):
        return
    
    user_id = str(update.effective_user.id)
    search_string = update.message.text.strip()
    
    # –ï—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É (–Ω–∞–∑–≤–∞–Ω–∏–µ + –∞–≤—Ç–æ—Ä)
    if "\n" in search_string:
        # –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        title, author = search_string.split("\n", maxsplit=1)
        
        logger.info(
            msg="combined search",
            extra={
                "command": "find_the_book",
                "user_id": user_id,
                "user_name": update.effective_user.name,
                "user_full_name": update.effective_user.full_name,
                "book_name": title,
                "author": author,
            }
        )
        
        mes = await update.message.reply_text("üîç –ò—â—É –∫–Ω–∏–≥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É...")
        
        try:
            books = flib.scrape_books_mbl(title, author)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            db.add_search_history(user_id, "exact", f"{title} | {author}", len(books) if books else 0)
            
            if not books:
                await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)
                await update.message.reply_text(
                    f"üòî –ö–Ω–∏–≥–∞ ¬´{title}¬ª –∞–≤—Ç–æ—Ä–∞ ¬´{author}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /title –∏–ª–∏ /author –¥–ª—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            context.user_data['search_results'] = books
            context.user_data['search_type'] = '—Ç–æ—á–Ω–æ–º—É –ø–æ–∏—Å–∫—É'
            context.user_data['search_query'] = f"{title} | {author}"
            
            await show_books_page(books, update, context, mes, page=1)
            
        except Exception as e:
            await handle_error(e, update, context, mes)
    
    else:
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –∫–∞–∫ –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        logger.info(
            msg="search by title (text message)",
            extra={
                "command": "find_the_book",
                "user_id": user_id,
                "user_name": update.effective_user.name,
                "user_full_name": update.effective_user.full_name,
                "book_name": search_string,
            }
        )
        
        mes = await update.message.reply_text("üîç –ò—â—É –∫–Ω–∏–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...")
        
        try:
            books = flib.scrape_books_by_title(search_string)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞
            db.add_search_history(user_id, "title", search_string, len(books) if books else 0)
            
            if not books:
                await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)
                
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
                await update.message.reply_text(
                    f"üòî –ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{search_string}¬ª –∫–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                    "üí° *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:*\n"
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `/author` –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞–≤—Ç–æ—Ä—É\n"
                    "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Ä–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:\n"
                    f"```\n{search_string}\n–§–∞–º–∏–ª–∏—è –∞–≤—Ç–æ—Ä–∞\n```",
                    parse_mode=ParseMode.MARKDOWN
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            context.user_data['search_results'] = books
            context.user_data['search_type'] = '–Ω–∞–∑–≤–∞–Ω–∏—é'
            context.user_data['search_query'] = search_string
            
            await show_books_page(books, update, context, mes, page=1)
            
        except Exception as e:
            await handle_error(e, update, context, mes)

async def handle_error(error, update: Update, context: CallbackContext, mes):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)
    await update.message.reply_text(
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É."
    )
    logger.error(f"Error occurred: {error}", extra={"exc": error})
    print("Traceback full:")
    print(traceback.format_exc())

async def show_books_page(books, update: Update, context: CallbackContext, mes, page: int = 1):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞"""
    total_books = len(books)
    total_pages = math.ceil(total_books / BOOKS_PER_PAGE)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 1:
        page = 1
    elif page > total_pages:
        page = total_pages
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = (page - 1) * BOOKS_PER_PAGE
    end_idx = min(start_idx + BOOKS_PER_PAGE, total_books)
    page_books = books[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    search_type = context.user_data.get('search_type', '–ø–æ–∏—Å–∫—É')
    search_query = context.user_data.get('search_query', '')
    
    header_text = f"""
üìö *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ {search_type}: ¬´{search_query}¬ª*

–ù–∞–π–¥–µ–Ω–æ: {total_books} –∫–Ω–∏–≥
–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}
    """
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–Ω–∏–≥
    kb = []
    user_id = str(update.effective_user.id)
    
    for i, book in enumerate(page_books, start=start_idx + 1):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–∏–≥–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        is_fav = db.is_favorite(user_id, book.id)
        star = "‚≠ê " if is_fav else ""
        
        # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        title = book.title[:35] + "..." if len(book.title) > 35 else book.title
        author = book.author[:20] + "..." if len(book.author) > 20 else book.author
        
        text = f"{star}{i}. {title} - {author}"
        callback_data = f"book_{book.id}"
        kb.append([InlineKeyboardButton(text, callback_data=callback_data)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
    
    if total_pages > 1:
        nav_buttons.append(InlineKeyboardButton(f"üìÑ {page}/{total_pages}", callback_data="current_page"))
    
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"page_{page+1}"))
    
    if nav_buttons:
        kb.append(nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
    if total_pages > 5:
        quick_nav = []
        if page > 3:
            quick_nav.append(InlineKeyboardButton("‚èÆ –í –Ω–∞—á–∞–ª–æ", callback_data="page_1"))
        if page < total_pages - 2:
            quick_nav.append(InlineKeyboardButton("–í –∫–æ–Ω–µ—Ü ‚è≠", callback_data=f"page_{total_pages}"))
        if quick_nav:
            kb.append(quick_nav)
    
    # –ö–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    kb.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(kb)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if mes:
        await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)
        await update.message.reply_text(
            header_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
    else:
        # –î–ª—è callback queries
        query = update.callback_query
        await query.edit_message_text(
            header_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )


async def show_book_details_with_favorite(book_id: str, update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–Ω–∏–≥–∏ —Å –∫–Ω–æ–ø–∫–æ–π –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cached_book = db.get_cached_book(book_id)
    if cached_book:
        book = flib.Book(book_id)
        book.title = cached_book['title']
        book.author = cached_book['author']
        book.link = cached_book['link']
        book.formats = cached_book['formats']
        book.cover = cached_book['cover']
        book.size = cached_book['size']
        book.series = cached_book.get('series', '')
        book.year = cached_book.get('year', '')
    else:
        book = flib.get_book_by_id(book_id)
        if book:
            db.cache_book(book)
    
    if not book:
        if update.callback_query:
            await update.callback_query.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        else:
            await update.message.reply_text("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    is_fav = db.is_favorite(user_id, book_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    capt = f"""
üìñ *{book.title}*
‚úçÔ∏è _{book.author}_
"""
    if hasattr(book, 'series') and book.series:
        capt += f"üìö –°–µ—Ä–∏—è: {book.series}\n"
    if hasattr(book, 'year') and book.year:
        capt += f"üìÖ –ì–æ–¥: {book.year}\n"
    if book.size:
        capt += f"üìä –†–∞–∑–º–µ—Ä: {book.size}\n"
    
    capt += f"\nüîó [–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç]({book.link})"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    kb = []
    
    # –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
    fav_text = "‚≠ê –£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" if is_fav else "‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
    kb.append([InlineKeyboardButton(fav_text, callback_data=f"toggle_favorite_{book_id}")])
    
    # –ö–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤
    for b_format in book.formats:
        text = f"üì• –°–∫–∞—á–∞—Ç—å {b_format}"
        callback_data = f"get_book_by_format {book_id}+{b_format}"
        kb.append([InlineKeyboardButton(text, callback_data=callback_data)])
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    kb.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_results")])
    
    reply_markup = InlineKeyboardMarkup(kb)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if book.cover:
        try:
            flib.download_book_cover(book)
            c_full_path = os.path.join(os.getcwd(), "books", book_id, "cover.jpg")
            with open(c_full_path, "rb") as cover:
                if update.callback_query:
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=cover,
                        caption=capt,
                        reply_markup=reply_markup,
                        parse_mode=ParseMode.MARKDOWN
                    )
                    await update.callback_query.delete_message()
                else:
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=cover,
                        caption=capt,
                        reply_markup=reply_markup,
                        parse_mode=ParseMode.MARKDOWN
                    )
        except Exception:
            text = "[–æ–±–ª–æ–∂–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞]\n\n" + capt
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text, 
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.MARKDOWN
                )
    else:
        text = "[–æ–±–ª–æ–∂–∫–∏ –Ω–µ—Ç]\n\n" + capt
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )


@check_access
async def show_favorites(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏"""
    user_id = str(update.effective_user.id)
    page = 1
    
    # –ï—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ callback, –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if update.callback_query:
        callback_data = update.callback_query.data
        if callback_data.startswith("show_favorites_"):
            page = int(callback_data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    offset = (page - 1) * FAVORITES_PER_PAGE
    favorites, total = db.get_user_favorites(user_id, offset, FAVORITES_PER_PAGE)
    
    if not favorites:
        text = "‚≠ê *–ò–∑–±—Ä–∞–Ω–Ω–æ–µ*\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥.\n\n–î–æ–±–∞–≤–ª—è–π—Ç–µ –∫–Ω–∏–≥–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!"
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
        return
    
    total_pages = math.ceil(total / FAVORITES_PER_PAGE)
    
    text = f"""
‚≠ê *–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏*

–í—Å–µ–≥–æ: {total} –∫–Ω–∏–≥
–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    """
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–Ω–∏–≥
    kb = []
    for i, fav in enumerate(favorites, start=offset + 1):
        title = fav['title'][:35] + "..." if len(fav['title']) > 35 else fav['title']
        author = fav['author'][:20] + "..." if len(fav['author']) > 20 else fav['author']
        
        button_text = f"{i}. {title} - {author}"
        callback_data = f"fav_book_{fav['book_id']}"
        kb.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"show_favorites_{page-1}"))
    if total_pages > 1:
        nav_buttons.append(InlineKeyboardButton(f"{page}/{total_pages}", callback_data="current_page"))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"show_favorites_{page+1}"))
    
    if nav_buttons:
        kb.append(nav_buttons)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    kb.append([
        InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="menu_search"),
        InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data="main_menu")
    ])
    
    reply_markup = InlineKeyboardMarkup(kb)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
    else:
        await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)


async def toggle_favorite(book_id: str, update: Update, context: CallbackContext):
    """–î–æ–±–∞–≤–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    user_id = str(update.effective_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
    book = flib.get_book_by_id(book_id)
    if not book:
        await update.callback_query.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    if db.is_favorite(user_id, book_id):
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        db.remove_from_favorites(user_id, book_id)
        await update.callback_query.answer("‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", show_alert=False)
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        success = db.add_to_favorites(user_id, book_id, book.title, book.author)
        if success:
            await update.callback_query.answer("‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", show_alert=False)
        else:
            await update.callback_query.answer("–£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º", show_alert=False)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∫–Ω–∏–≥–∏
    await show_book_details_with_favorite(book_id, update, context)


async def get_book_by_format(data: str, update: Update, context: CallbackContext):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    user_id = str(update.effective_user.id)
    book_id, book_format = data.split("+")
    
    logger.info(
        msg="get book by format",
        extra={
            "command": "get_book_by_format",
            "user_id": user_id,
            "user_name": update.effective_user.name,
            "data": data,
        }
    )
    
    await update.callback_query.answer("‚è≥ –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
    
    mes = await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text="‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Å–∫–∞—á–∏–≤–∞—é –∫–Ω–∏–≥—É..."
    )
    
    book = flib.get_book_by_id(book_id)
    b_content, b_filename = flib.download_book(book, book_format)
    
    if b_filename:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
        db.add_download(user_id, book_id, book.title, book.author, book_format)
        
        await context.bot.send_document(
            chat_id=update.effective_chat.id, 
            document=b_content, 
            filename=b_filename,
            caption=f"‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!\nüìñ {book.title}\n‚úçÔ∏è {book.author}"
        )
        await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)
    else:
        await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∫–Ω–∏–≥–∏.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç."
        )


@check_callback_access
async def button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = str(update.effective_user.id)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    if data.startswith("page_"):
        page = int(data.split("_")[1])
        books = context.user_data.get('search_results', [])
        if books:
            await show_books_page(books, update, context, None, page)
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–Ω–∏–≥–∏
    if data.startswith("book_"):
        book_id = data.split("_")[1]
        await show_book_details_with_favorite(book_id, update, context)
        return
    
    # –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
    if data.startswith("show_favorites_"):
        await show_favorites(update, context)
        return
    
    if data.startswith("fav_book_"):
        book_id = data.split("_")[2]
        await show_book_details_with_favorite(book_id, update, context)
        return
    
    if data.startswith("toggle_favorite_"):
        book_id = data.split("_")[2]
        await toggle_favorite(book_id, update, context)
        return
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "main_menu":
        await show_main_menu(update, context)
        return
    
    # –ú–µ–Ω—é –ø–æ–∏—Å–∫–∞
    if data == "menu_search":
        await show_search_menu(update, context)
        return
    
    # –ò—Å—Ç–æ—Ä–∏—è
    if data == "show_history":
        await show_user_history(update, context)
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if data == "show_my_stats":
        await show_user_statistics(update, context)
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    if data == "show_settings":
        await show_user_settings(update, context)
        return
    
    # –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    if data == "back_to_results":
        books = context.user_data.get('search_results', [])
        if books:
            await show_books_page(books, update, context, None, 1)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö callback'–æ–≤
    if " " in data:
        command, arg = data.split(" ", maxsplit=1)
        if command == "find_book_by_id":
            await show_book_details_with_favorite(arg, update, context)
        elif command == "get_book_by_format":
            await get_book_by_format(data=arg, update=update, context=context)

async def show_main_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_name = update.effective_user.first_name or "–ö–Ω–∏–≥–æ–ª—é–±"
    user_id = str(update.effective_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    user_stats = db.get_user_stats(user_id)
    favorites_count = user_stats.get('favorites_count', 0)
    search_count = user_stats.get('user_info', {}).get('search_count', 0)
    download_count = user_stats.get('user_info', {}).get('download_count', 0)
    
    text = f"""
üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*

–ü—Ä–∏–≤–µ—Ç, {user_name}!

üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –ü–æ–∏—Å–∫–æ–≤: {search_count}
‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–π: {download_count}
‚Ä¢ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {favorites_count}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    keyboard = [
        [
            InlineKeyboardButton("üìñ –ü–æ–∏—Å–∫ –∫–Ω–∏–≥", callback_data="menu_search"),
            InlineKeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data="show_favorites_1")
        ],
        [
            InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="show_history"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_my_stats")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="show_settings")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )


async def show_search_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–∏—Å–∫–∞"""
    text = """
üîç *–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞*

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:

üìñ –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é - –Ω–∞–π—Ç–∏ –∫–Ω–∏–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
üë§ –ü–æ –∞–≤—Ç–æ—Ä—É - –≤—Å–µ –∫–Ω–∏–≥–∏ –∞–≤—Ç–æ—Ä–∞
üéØ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ - –Ω–∞–∑–≤–∞–Ω–∏–µ + –∞–≤—Ç–æ—Ä
üÜî –ü–æ ID - –µ—Å–ª–∏ –∑–Ω–∞–µ—Ç–µ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ `/title –Ω–∞–∑–≤–∞–Ω–∏–µ`
‚Ä¢ `/author —Ñ–∞–º–∏–ª–∏—è`
‚Ä¢ `/exact –Ω–∞–∑–≤–∞–Ω–∏–µ | –∞–≤—Ç–æ—Ä`
‚Ä¢ `/id –Ω–æ–º–µ—Ä`
    """
    
    keyboard = [
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )


async def show_user_history(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(update.effective_user.id)
    history = db.get_user_search_history(user_id, limit=10)
    
    if not history:
        text = "üìú *–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞*\n\n–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞"
    else:
        text = "üìú *–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞*\n\n"
        for item in history:
            timestamp = item['timestamp'][:16]  # –£–±–∏—Ä–∞–µ–º —Å–µ–∫—É–Ω–¥—ã
            command = item['command']
            query = item['query'][:30] + "..." if len(item['query']) > 30 else item['query']
            results = item['results_count']
            
            text += f"üïê {timestamp}\n"
            text += f"   /{command}: ¬´{query}¬ª ({results} —Ä–µ–∑.)\n\n"
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )


async def show_user_statistics(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(update.effective_user.id)
    stats = db.get_user_stats(user_id)
    
    user_info = stats.get('user_info', {})
    favorites_count = stats.get('favorites_count', 0)
    favorite_authors = stats.get('favorite_authors', [])
    
    text = f"""
üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_info.get('first_seen', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10]}
üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_info.get('last_seen', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]}

üìà *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*
‚Ä¢ –ü–æ–∏—Å–∫–æ–≤: {user_info.get('search_count', 0)}
‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–π: {user_info.get('download_count', 0)}
‚Ä¢ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {favorites_count}

üë§ *–õ—é–±–∏–º—ã–µ –∞–≤—Ç–æ—Ä—ã:*
"""
    
    if favorite_authors:
        for i, author in enumerate(favorite_authors[:5], 1):
            text += f"{i}. {author['author']} ({author['count']} –∫–Ω–∏–≥)\n"
    else:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )


async def show_user_settings(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(update.effective_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    books_per_page = db.get_user_preference(user_id, 'books_per_page', BOOKS_PER_PAGE)
    default_format = db.get_user_preference(user_id, 'default_format', 'fb2')
    
    text = f"""
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*

üìÑ –ö–Ω–∏–≥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {books_per_page}
üìÅ –§–æ—Ä–º–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_format}

_–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏_
    """
    
    keyboard = [
        [
            InlineKeyboardButton("üìÑ 5", callback_data="set_per_page_5"),
            InlineKeyboardButton("üìÑ 10", callback_data="set_per_page_10"),
            InlineKeyboardButton("üìÑ 20", callback_data="set_per_page_20")
        ],
        [
            InlineKeyboardButton("FB2", callback_data="set_format_fb2"),
            InlineKeyboardButton("EPUB", callback_data="set_format_epub"),
            InlineKeyboardButton("MOBI", callback_data="set_format_mobi")
        ],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–±—Ä–∞–Ω–Ω—ã–º –∏ –∏—Å—Ç–æ—Ä–∏–µ–π
@check_access
async def favorites_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    await show_favorites(update, context)


@check_access
async def history_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
    user_id = str(update.effective_user.id)
    history = db.get_user_search_history(user_id, limit=15)
    
    if not history:
        text = "üìú *–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞*\n\n–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞\n\n–ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ —Å –∫–æ–º–∞–Ω–¥:\n‚Ä¢ /title\n‚Ä¢ /author\n‚Ä¢ /exact"
    else:
        text = "üìú *–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 15)*\n\n"
        for item in history:
            timestamp = item['timestamp'][:16]
            command = item['command']
            query = item['query'][:30] + "..." if len(item['query']) > 30 else item['query']
            results = item['results_count']
            
            text += f"üïê {timestamp}\n"
            text += f"   `/{command}`: ¬´{query}¬ª ({results} —Ä–µ–∑.)\n\n"
    
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)


@check_access
async def downloads_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π"""
    user_id = str(update.effective_user.id)
    downloads = db.get_user_downloads(user_id, limit=15)
    
    if not downloads:
        text = "üì• *–ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–π*\n\n–ü–æ–∫–∞ –ø—É—Å—Ç–æ"
    else:
        text = "üì• *–ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 15)*\n\n"
        for item in downloads:
            timestamp = item['download_date'][:16]
            title = item['title'][:30] + "..." if len(item['title']) > 30 else item['title']
            author = item['author'][:20] + "..." if len(item['author']) > 20 else item['author']
            format_type = item['format']
            
            text += f"üïê {timestamp}\n"
            text += f"   üìñ {title}\n"
            text += f"   ‚úçÔ∏è {author}\n"
            text += f"   üìÅ –§–æ—Ä–º–∞—Ç: {format_type}\n\n"
    
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)


@check_access
async def mystats_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ª–∏—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = str(update.effective_user.id)
    stats = db.get_user_stats(user_id)
    
    user_info = stats.get('user_info', {})
    favorites_count = stats.get('favorites_count', 0)
    favorite_authors = stats.get('favorite_authors', [])
    recent_downloads = stats.get('recent_downloads', [])
    
    text = f"""
üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üë§ *–ü—Ä–æ—Ñ–∏–ª—å:*
‚Ä¢ ID: `{user_id}`
‚Ä¢ –ò–º—è: {user_info.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
‚Ä¢ Username: @{user_info.get('username', '–Ω–µ—Ç')}

üìÖ *–î–∞—Ç—ã:*
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_info.get('first_seen', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:10]}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_info.get('last_seen', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:16]}

üìà *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*
‚Ä¢ –ü–æ–∏—Å–∫–æ–≤: {user_info.get('search_count', 0)}
‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–π: {user_info.get('download_count', 0)}
‚Ä¢ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {favorites_count}

üë§ *–¢–æ–ø-5 –ª—é–±–∏–º—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤:*
"""
    
    if favorite_authors:
        for i, author in enumerate(favorite_authors[:5], 1):
            text += f"{i}. {author['author']} ‚Äî {author['count']} –∫–Ω–∏–≥\n"
    else:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
    
    text += "\nüìö *–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:*\n"
    if recent_downloads:
        for download in recent_downloads[:3]:
            title = download['title'][:25] + "..." if len(download['title']) > 25 else download['title']
            text += f"‚Ä¢ {title}\n"
    else:
        text += "–ü–æ–∫–∞ –Ω–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–π\n"
    
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)


@check_access
async def settings_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = str(update.effective_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    books_per_page = db.get_user_preference(user_id, 'books_per_page', BOOKS_PER_PAGE)
    default_format = db.get_user_preference(user_id, 'default_format', 'fb2')
    notifications = db.get_user_preference(user_id, 'notifications', True)
    
    text = f"""
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏*

*–¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:*
üìÑ –ö–Ω–∏–≥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: `{books_per_page}`
üìÅ –§–æ—Ä–º–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: `{default_format}`
üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: `{'–í–∫–ª—é—á–µ–Ω—ã' if notifications else '–í—ã–∫–ª—é—á–µ–Ω—ã'}`

*–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:*
‚Ä¢ `/setpage [5|10|20]` - –∫–Ω–∏–≥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
‚Ä¢ `/setformat [fb2|epub|mobi|pdf]` - —Ñ–æ—Ä–º–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

*–ü—Ä–∏–º–µ—Ä—ã:*
`/setpage 20`
`/setformat epub`
    """
    
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)


@check_access
async def setpage_command(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"""
    user_id = str(update.effective_user.id)
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–∏–≥\n"
            "–ü—Ä–∏–º–µ—Ä: `/setpage 20`\n"
            "–î–æ—Å—Ç—É–ø–Ω–æ: 5, 10, 20",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    try:
        count = int(context.args[0])
        if count not in [5, 10, 20]:
            raise ValueError
        
        db.set_user_preference(user_id, 'books_per_page', count)
        global BOOKS_PER_PAGE
        BOOKS_PER_PAGE = count
        
        await update.message.reply_text(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {count} –∫–Ω–∏–≥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 5, 10 –∏–ª–∏ 20")


@check_access
async def setformat_command(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    user_id = str(update.effective_user.id)
    
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç\n"
            "–ü—Ä–∏–º–µ—Ä: `/setformat epub`\n"
            "–î–æ—Å—Ç—É–ø–Ω–æ: fb2, epub, mobi, pdf, djvu",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    format_type = context.args[0].lower()
    if format_type not in ['fb2', 'epub', 'mobi', 'pdf', 'djvu']:
        await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: fb2, epub, mobi, pdf, djvu")
        return
    
    db.set_user_preference(user_id, 'default_format', format_type)
    await update.message.reply_text(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {format_type.upper()}")


@check_access
async def show_stats(update: Update, _: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if ALLOWED_USERS and user_id == ALLOWED_USERS[0]:
        stats = db.get_global_stats()
        
        stats_text = f"""
üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*

üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*
‚Ä¢ –í—Å–µ–≥–æ: {stats['total_users']}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (7 –¥–Ω–µ–π): {stats['active_users']}

üìà *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*
‚Ä¢ –ü–æ–∏—Å–∫–æ–≤: {stats['total_searches']}
‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–π: {stats['total_downloads']}
‚Ä¢ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º: {stats['total_favorites']}

üî• *–¢–æ–ø –∫–æ–º–∞–Ω–¥:*
"""
        for i, cmd in enumerate(stats['top_commands'][:5], 1):
            stats_text += f"{i}. /{cmd['command']}: {cmd['count']} —Ä–∞–∑\n"
        
        stats_text += "\nüìö *–¢–æ–ø –∫–Ω–∏–≥:*\n"
        for i, book in enumerate(stats['top_books'][:5], 1):
            title = book['title'][:30] + "..." if len(book['title']) > 30 else book['title']
            stats_text += f"{i}. {title} ({book['count']} —Å–∫–∞—á.)\n"
        
        stats_text += "\n‚úçÔ∏è *–¢–æ–ø –∞–≤—Ç–æ—Ä–æ–≤:*\n"
        for i, author in enumerate(stats['top_authors'][:5], 1):
            name = author['author'][:25] + "..." if len(author['author']) > 25 else author['author']
            stats_text += f"{i}. {name} ({author['count']} —Å–∫–∞—á.)\n"
        
        await update.message.reply_text(
            stats_text,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@check_access
async def list_allowed_users(update: Update, _: CallbackContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–≤—ã–º –≤ —Å–ø–∏—Å–∫–µ (–∞–¥–º–∏–Ω–æ–º)
    if ALLOWED_USERS and user_id == ALLOWED_USERS[0]:
        if ALLOWED_USERS:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ –ë–î
            users_info = []
            for uid in ALLOWED_USERS:
                user_data = db.get_user(uid)
                if user_data:
                    users_info.append(f"‚Ä¢ {uid} - {user_data.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                else:
                    users_info.append(f"‚Ä¢ {uid} - (–Ω–µ –≤ –ë–î)")
            
            users_list = "\n".join(users_info)
            await update.message.reply_text(
                f"üìã *–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n{users_list}\n\n"
                f"_–í—Å–µ–≥–æ: {len(ALLOWED_USERS)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π_",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç. –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö.")
    else:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async def cleanup_job(context: CallbackContext):
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    db.cleanup_old_data(days=30)
    logger.info("Database cleanup completed")
