import os
import traceback
from urllib.error import HTTPError
from functools import wraps
from enum import Enum
import re
from datetime import datetime
from collections import defaultdict

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import CallbackContext, ConversationHandler
from telegram.constants import ParseMode

from src import flib
from src.custom_logging import get_logger

logger = get_logger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
ALLOWED_USERS = os.getenv('ALLOWED_USERS', '').split(',')
ALLOWED_USERS = [user_id.strip() for user_id in ALLOWED_USERS if user_id.strip()]

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
usage_stats = defaultdict(int)
search_history = defaultdict(list)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
class SearchState(Enum):
    WAITING_TITLE = 1
    WAITING_AUTHOR = 2
    WAITING_COMBINED = 3


def check_access(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    @wraps(func)
    async def wrapper(update: Update, context: CallbackContext):
        user_id = str(update.effective_user.id)
        
        if not ALLOWED_USERS:
            return await func(update, context)
        
        if user_id not in ALLOWED_USERS:
            logger.warning(
                msg="Unauthorized access attempt",
                extra={
                    "user_id": user_id,
                    "user_name": update.effective_user.name,
                    "user_full_name": update.effective_user.full_name,
                }
            )
            await update.message.reply_text(
                "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
            )
            return
        
        return await func(update, context)
    
    return wrapper


def check_callback_access(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ callback –∑–∞–ø—Ä–æ—Å–∞—Ö"""
    @wraps(func)
    async def wrapper(update: Update, context: CallbackContext):
        user_id = str(update.effective_user.id)
        
        if not ALLOWED_USERS:
            return await func(update, context)
        
        if user_id not in ALLOWED_USERS:
            logger.warning(
                msg="Unauthorized callback access attempt",
                extra={
                    "user_id": user_id,
                    "user_name": update.effective_user.name,
                    "user_full_name": update.effective_user.full_name,
                }
            )
            query = update.callback_query
            await query.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É", show_alert=True)
            return
        
        return await func(update, context)
    
    return wrapper


async def quick_search_menu(update: Update, context: CallbackContext):
    """–ú–µ–Ω—é –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
    quick_text = """
‚ö° *–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫*

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞:
    """
    
    keyboard = [
        [
            InlineKeyboardButton("üìö –ö–ª–∞—Å—Å–∏–∫–∞", callback_data="quick_classic"),
            InlineKeyboardButton("üîÆ –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", callback_data="quick_fantasy")
        ],
        [
            InlineKeyboardButton("üïµÔ∏è –î–µ—Ç–µ–∫—Ç–∏–≤—ã", callback_data="quick_detective"),
            InlineKeyboardButton("üíï –†–æ–º–∞–Ω—ã", callback_data="quick_romance")
        ],
        [
            InlineKeyboardButton("üß™ –ù–∞—É—á–ø–æ–ø", callback_data="quick_science"),
            InlineKeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="quick_history")
        ],
        [
            InlineKeyboardButton("‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        quick_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )


@check_access
async def start_callback(update: Update, context: CallbackContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    user_name = update.effective_user.first_name or "–ö–Ω–∏–≥–æ–ª—é–±"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start quick_search)
    if context.args and context.args[0] == "quick_search":
        await quick_search_menu(update, context)
        return
    
    help_text = f"""
üëã *–ü—Ä–∏–≤–µ—Ç, {user_name}!*

üìö *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É Flibusta!*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
*üîç –ö–û–ú–ê–ù–î–´ –ü–û–ò–°–ö–ê*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìñ /title `–Ω–∞–∑–≤–∞–Ω–∏–µ` - –ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
üë§ /author `—Ñ–∞–º–∏–ª–∏—è` - –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥ –∞–≤—Ç–æ—Ä–∞
üéØ /exact `–Ω–∞–∑–≤–∞–Ω–∏–µ | –∞–≤—Ç–æ—Ä` - —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏
üÜî /id `–Ω–æ–º–µ—Ä` - –ø–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É –ø–æ ID
üîç /search - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ (—Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
*üìù –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚Ä¢ `/title 1984` - –Ω–∞–π–¥–µ—Ç –≤—Å–µ –∫–Ω–∏–≥–∏ —Å "1984" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
‚Ä¢ `/author –û—Ä—É—ç–ª–ª` - –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –∫–Ω–∏–≥–∏ –î–∂–æ—Ä–¥–∂–∞ –û—Ä—É—ç–ª–ª–∞
‚Ä¢ `/exact 1984 | –û—Ä—É—ç–ª–ª` - –Ω–∞–π–¥–µ—Ç –∏–º–µ–Ω–Ω–æ "1984" –û—Ä—É—ç–ª–ª–∞
‚Ä¢ `/id 123456` - –ø–æ–ª—É—á–∏—Ç –∫–Ω–∏–≥—É —Å ID 123456

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
*üí° –ü–û–õ–ï–ó–ù–´–ï –°–û–í–ï–¢–´*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/author` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–Ω–∏–≥ –∞–≤—Ç–æ—Ä–∞
‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/exact` –∫–æ–≥–¥–∞ –∑–Ω–∞–µ—Ç–µ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏ –∞–≤—Ç–æ—Ä–∞
‚úÖ –ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é –∞–≤—Ç–æ—Ä–∞
‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
*‚ÑπÔ∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìã /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é —Å–Ω–æ–≤–∞
üë• /users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)

_–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫!_
    """
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    keyboard = [
        [
            InlineKeyboardButton("üìñ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="help_title"),
            InlineKeyboardButton("üë§ –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É", callback_data="help_author")
        ],
        [
            InlineKeyboardButton("üéØ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="help_exact"),
            InlineKeyboardButton("üÜî –ü–æ–∏—Å–∫ –ø–æ ID", callback_data="help_id")
        ],
        [
            InlineKeyboardButton("üîç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="help_search")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        help_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )


@check_access
async def search_by_title(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–Ω–∏–≥–∏"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n"
            "–ü—Ä–∏–º–µ—Ä: `/title –ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞`",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    title = ' '.join(context.args)
    
    # –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    user_id = str(update.effective_user.id)
    usage_stats['search_by_title'] += 1
    search_history[user_id].append({
        'type': 'title',
        'query': title,
        'timestamp': datetime.now()
    })
    
    logger.info(
        msg="search by title",
        extra={
            "command": "search_by_title",
            "user_id": update.effective_user.id,
            "user_name": update.effective_user.name,
            "title": title,
        }
    )
    
    mes = await update.message.reply_text("üîç –ò—â—É –∫–Ω–∏–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...")
    
    try:
        books = flib.scrape_books_by_title(title)
        
        if not books:
            await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)
            await update.message.reply_text(
                f"üòî –ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{title}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É."
            )
            return
        
        await show_books_list(books, update, context, mes, f"üìö –ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é ¬´{title}¬ª: {len(books)}")
        
    except Exception as e:
        await handle_error(e, update, context, mes)


@check_access
async def search_by_author(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∞–≤—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n"
            "–ü—Ä–∏–º–µ—Ä: `/author –¢–æ–ª—Å—Ç–æ–π`",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    author = ' '.join(context.args)
    
    logger.info(
        msg="search by author",
        extra={
            "command": "search_by_author", 
            "user_id": update.effective_user.id,
            "user_name": update.effective_user.name,
            "author": author,
        }
    )
    
    mes = await update.message.reply_text("üîç –ò—â—É –∫–Ω–∏–≥–∏ –∞–≤—Ç–æ—Ä–∞...")
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É
        authors_books = flib.scrape_books_by_author(author)
        
        if not authors_books:
            await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)
            await update.message.reply_text(
                f"üòî –ê–≤—Ç–æ—Ä ¬´{author}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é\n"
                "‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /search –¥–ª—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞"
            )
            return
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–Ω–∏–≥–∏ –æ—Ç –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–æ–≤
        all_books = []
        for author_books in authors_books:
            all_books.extend(author_books)
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ ID
        unique_books = {}
        for book in all_books:
            if book.id not in unique_books:
                unique_books[book.id] = book
        
        books_list = list(unique_books.values())
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        books_list.sort(key=lambda x: x.title)
        
        await show_books_list(
            books_list, 
            update, 
            context, 
            mes, 
            f"üë§ –ù–∞–π–¥–µ–Ω–æ –∫–Ω–∏–≥ –∞–≤—Ç–æ—Ä–∞ ¬´{author}¬ª: {len(books_list)}"
        )
        
    except Exception as e:
        await handle_error(e, update, context, mes)


@check_access
async def search_exact(update: Update, context: CallbackContext) -> None:
    """–¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å |\n"
            "–ü—Ä–∏–º–µ—Ä: `/exact –í–æ–π–Ω–∞ –∏ –º–∏—Ä | –¢–æ–ª—Å—Ç–æ–π`",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    search_text = ' '.join(context.args)
    
    if '|' not in search_text:
        await update.message.reply_text(
            "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å | –º–µ–∂–¥—É –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –∞–≤—Ç–æ—Ä–æ–º\n"
            "–ü—Ä–∏–º–µ—Ä: `/exact –ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ | –ë—É–ª–≥–∞–∫–æ–≤`",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    parts = search_text.split('|')
    title = parts[0].strip()
    author = parts[1].strip()
    
    logger.info(
        msg="exact search",
        extra={
            "command": "search_exact",
            "user_id": update.effective_user.id,
            "user_name": update.effective_user.name,
            "title": title,
            "author": author,
        }
    )
    
    mes = await update.message.reply_text("üîç –í—ã–ø–æ–ª–Ω—è—é —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫...")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É
        books = flib.scrape_books_mbl(title, author)
        
        if not books:
            await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)
            await update.message.reply_text(
                f"üòî –ö–Ω–∏–≥–∞ ¬´{title}¬ª –∞–≤—Ç–æ—Ä–∞ ¬´{author}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã /title –∏–ª–∏ /author –¥–ª—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞."
            )
            return
        
        await show_books_list(
            books, 
            update, 
            context, 
            mes,
            f"üéØ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫: ¬´{title}¬ª - {author}\n–ù–∞–π–¥–µ–Ω–æ: {len(books)}"
        )
        
    except Exception as e:
        await handle_error(e, update, context, mes)


@check_access
async def search_by_id(update: Update, context: CallbackContext) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É –ø–æ ID"""
    if not context.args:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∫–Ω–∏–≥–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã\n"
            "–ü—Ä–∏–º–µ—Ä: `/id 123456`",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    book_id = context.args[0]
    
    if not book_id.isdigit():
        await update.message.reply_text(
            "‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º\n"
            "–ü—Ä–∏–º–µ—Ä: `/id 123456`",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    logger.info(
        msg="search by id",
        extra={
            "command": "search_by_id",
            "user_id": update.effective_user.id,
            "user_name": update.effective_user.name,
            "book_id": book_id,
        }
    )
    
    mes = await update.message.reply_text("üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ...")
    
    try:
        book = flib.get_book_by_id(book_id)
        
        if not book:
            await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)
            await update.message.reply_text(f"üòî –ö–Ω–∏–≥–∞ —Å ID {book_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        await show_book_details(book, update, context, mes)
        
    except Exception as e:
        await handle_error(e, update, context, mes)


@check_access
async def universal_search(update: Update, _: CallbackContext):
    """–°—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    await update.message.reply_text(
        "üîç *–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∞) –ò–õ–ò –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∞–≤—Ç–æ—Ä–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.\n"
        "\n"
        "*–ü—Ä–∏–º–µ—Ä:*\n"
        "```\n"
        "1984\n"
        "–û—Ä—É—ç–ª–ª\n"
        "```\n"
        "\nüí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:\n"
        "‚Ä¢ /title - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "‚Ä¢ /author - –ø–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É\n"
        "‚Ä¢ /exact - —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫",
        parse_mode=ParseMode.MARKDOWN
    )


async def show_books_list(books, update: Update, context: CallbackContext, mes, header_text):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥"""
    if len(books) > 100:
        books = books[:100]
        header_text += "\n‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 100 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
    
    kbs = []
    kb = []
    
    for i, book in enumerate(books):
        # –°–æ–∫—Ä–∞—â–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        title = book.title[:40] + "..." if len(book.title) > 40 else book.title
        author = book.author[:20] + "..." if len(book.author) > 20 else book.author
        
        text = f"{title} - {author}"
        callback_data = f"find_book_by_id {book.id}"
        kb.append([InlineKeyboardButton(text, callback_data=callback_data)])
        
        if len(kb) == 49:
            kbs.append(kb.copy())
            kb = []
    
    if kb:
        kbs.append(kb)
    
    await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    await update.message.reply_text(header_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    for kb in kbs:
        reply_markup = InlineKeyboardMarkup(kb)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É:", reply_markup=reply_markup)


async def show_book_details(book, update: Update, context: CallbackContext, mes):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∫–Ω–∏–≥–∏"""
    capt = (
        f"üìñ *{book.title}*\n"
        f"‚úçÔ∏è _{book.author}_\n"
        f"üìä –†–∞–∑–º–µ—Ä: {book.size}\n"
        f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç]({book.link})"
    )
    
    kb = []
    for b_format in book.formats:
        text = f"üì• –°–∫–∞—á–∞—Ç—å {b_format}"
        callback_data = f"get_book_by_format {book.id}+{b_format}"
        kb.append([InlineKeyboardButton(text, callback_data=callback_data)])
    
    reply_markup = InlineKeyboardMarkup(kb)
    
    if book.cover:
        try:
            flib.download_book_cover(book)
            c_full_path = os.path.join(os.getcwd(), "books", book.id, "cover.jpg")
            with open(c_full_path, "rb") as cover:
                await context.bot.send_photo(
                    chat_id=update.effective_chat.id,
                    photo=cover,
                    caption=capt,
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="[–æ–±–ª–æ–∂–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞]\n\n" + capt,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="[–æ–±–ª–æ–∂–∫–∏ –Ω–µ—Ç]\n\n" + capt,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)


async def handle_error(error, update: Update, context: CallbackContext, mes):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)
    await update.message.reply_text(
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞.\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É."
    )
    logger.error(f"Error occurred: {error}", extra={"exc": error})
    print("Traceback full:")
    print(traceback.format_exc())


@check_access
async def find_the_book(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π
    if update.message.text.startswith('/'):
        return
    
    if len(update.message.text.split('\n')) == 2:
        log_author = update.message.text.split('\n')[1]
    else:
        log_author = None
        
    logger.info(
        msg="find the book",
        extra={
            "command": "find_the_book",
            "user_id": update.effective_user.id,
            "user_name": update.effective_user.name,
            "user_full_name": update.effective_user.full_name,
            "book_name": update.message.text.split('\n')[0],
            "author": log_author,
        }
    )

    search_string = update.message.text
    mes = await update.message.reply_text("üîç –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –ø–æ–∏—Å–∫...")

    err_author = False
    try:
        libr = []
        if "\n" in search_string:
            title, author = search_string.split("\n", maxsplit=1)
            if len(author.split(" ")) > 1:
                err_author = True
            scr_lib = flib.scrape_books_mbl(title, author)
            if scr_lib:
                libr += scr_lib
        else:
            libr_t = flib.scrape_books_by_title(search_string)
            libr_a = flib.scrape_books_by_author(search_string)
            if libr_t:
                libr += libr_t
            if libr_a:
                libr += [book for nested_list in libr_a for book in nested_list]
        
        if search_string.isdigit():
            book_by_id = flib.get_book_by_id(search_string)
            if book_by_id:
                libr.append(book_by_id)

    except (AttributeError, HTTPError) as e:
        await handle_error(e, update, context, mes)
        return

    if not libr:
        await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)
        await update.message.reply_text("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        if err_author:
            await update.message.reply_text(
                "‚ö†Ô∏è –í–µ—Ä–æ—è—Ç–Ω–æ –≤–º–µ—Å—Ç–æ —Ñ–∞–º–∏–ª–∏–∏ –∞–≤—Ç–æ—Ä–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –±—ã–ª–æ —É–∫–∞–∑–∞–Ω–æ —á—Ç–æ-—Ç–æ –µ—â—ë"
            )
    else:
        await show_books_list(libr, update, context, mes, f"üìö –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(libr)}")


@check_callback_access
async def button(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–º–æ—â–∏
    if query.data.startswith("help_"):
        await handle_help_buttons(query, update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    command, arg = query.data.split(" ", maxsplit=1)
    if command == "find_book_by_id":
        await find_book_by_id(book_id=arg, update=update, context=context)
    if command == "get_book_by_format":
        await get_book_by_format(data=arg, update=update, context=context)


async def handle_help_buttons(query, update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–º–æ—â–∏"""
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é"
    if query.data == "back_to_menu":
        help_text = """
üìö *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É Flibusta!*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
*üîç –ö–û–ú–ê–ù–î–´ –ü–û–ò–°–ö–ê*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìñ /title `–Ω–∞–∑–≤–∞–Ω–∏–µ` - –ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
üë§ /author `—Ñ–∞–º–∏–ª–∏—è` - –ø–æ–∏—Å–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥ –∞–≤—Ç–æ—Ä–∞
üéØ /exact `–Ω–∞–∑–≤–∞–Ω–∏–µ | –∞–≤—Ç–æ—Ä` - —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏
üÜî /id `–Ω–æ–º–µ—Ä` - –ø–æ–ª—É—á–∏—Ç—å –∫–Ω–∏–≥—É –ø–æ ID
üîç /search - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ (—Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
*üìù –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚Ä¢ `/title 1984` - –Ω–∞–π–¥–µ—Ç –≤—Å–µ –∫–Ω–∏–≥–∏ —Å "1984" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
‚Ä¢ `/author –û—Ä—É—ç–ª–ª` - –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –∫–Ω–∏–≥–∏ –î–∂–æ—Ä–¥–∂–∞ –û—Ä—É—ç–ª–ª–∞
‚Ä¢ `/exact 1984 | –û—Ä—É—ç–ª–ª` - –Ω–∞–π–¥–µ—Ç –∏–º–µ–Ω–Ω–æ "1984" –û—Ä—É—ç–ª–ª–∞
‚Ä¢ `/id 123456` - –ø–æ–ª—É—á–∏—Ç –∫–Ω–∏–≥—É —Å ID 123456

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
*üí° –ü–û–õ–ï–ó–ù–´–ï –°–û–í–ï–¢–´*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/author` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–Ω–∏–≥ –∞–≤—Ç–æ—Ä–∞
‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/exact` –∫–æ–≥–¥–∞ –∑–Ω–∞–µ—Ç–µ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –∏ –∞–≤—Ç–æ—Ä–∞
‚úÖ –ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é –∞–≤—Ç–æ—Ä–∞
‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
*‚ÑπÔ∏è –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û*
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìã /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é —Å–Ω–æ–≤–∞
üë• /users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)

_–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫!_
        """
        
        keyboard = [
            [
                InlineKeyboardButton("üìñ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="help_title"),
                InlineKeyboardButton("üë§ –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É", callback_data="help_author")
            ],
            [
                InlineKeyboardButton("üéØ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="help_exact"),
                InlineKeyboardButton("üÜî –ü–æ–∏—Å–∫ –ø–æ ID", callback_data="help_id")
            ],
            [
                InlineKeyboardButton("üîç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="help_search")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=help_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=reply_markup
        )
        return
    
    help_type = query.data.replace("help_", "")
    
    help_messages = {
        "title": (
            "üìñ *–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–Ω–∏–≥–∏*\n\n"
            "*–§–æ—Ä–º–∞—Ç:* `/title –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏`\n\n"
            "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
            "‚Ä¢ `/title –í–æ–π–Ω–∞ –∏ –º–∏—Ä`\n"
            "‚Ä¢ `/title 1984`\n"
            "‚Ä¢ `/title –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä`\n\n"
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–π–¥–µ—Ç –≤—Å–µ –∫–Ω–∏–≥–∏, –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.\n\n"
            "_–°–æ–≤–µ—Ç: –ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞._"
        ),
        "author": (
            "üë§ *–ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É*\n\n"
            "*–§–æ—Ä–º–∞—Ç:* `/author —Ñ–∞–º–∏–ª–∏—è –∞–≤—Ç–æ—Ä–∞`\n\n"
            "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
            "‚Ä¢ `/author –¢–æ–ª—Å—Ç–æ–π`\n"
            "‚Ä¢ `/author –ü—É—à–∫–∏–Ω`\n"
            "‚Ä¢ `/author –ö–∏–Ω–≥`\n\n"
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –∫–Ω–∏–≥–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞.\n\n"
            "_–°–æ–≤–µ—Ç: –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ —Ñ–∞–º–∏–ª–∏—é –∞–≤—Ç–æ—Ä–∞._"
        ),
        "exact": (
            "üéØ *–¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏*\n\n"
            "*–§–æ—Ä–º–∞—Ç:* `/exact –Ω–∞–∑–≤–∞–Ω–∏–µ | –∞–≤—Ç–æ—Ä`\n\n"
            "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
            "‚Ä¢ `/exact –í–æ–π–Ω–∞ –∏ –º–∏—Ä | –¢–æ–ª—Å—Ç–æ–π`\n"
            "‚Ä¢ `/exact 1984 | –û—Ä—É—ç–ª–ª`\n"
            "‚Ä¢ `/exact –û–Ω–æ | –ö–∏–Ω–≥`\n\n"
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–Ω–∏–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞.\n\n"
            "_–í–∞–∂–Ω–æ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª | –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∞–≤—Ç–æ—Ä–∞._"
        ),
        "id": (
            "üÜî *–ü–æ–∏—Å–∫ –ø–æ ID*\n\n"
            "*–§–æ—Ä–º–∞—Ç:* `/id –Ω–æ–º–µ—Ä`\n\n"
            "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
            "‚Ä¢ `/id 123456`\n"
            "‚Ä¢ `/id 789012`\n\n"
            "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–∏—Ç –∫–Ω–∏–≥—É –ø–æ –µ—ë —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –Ω–∞ —Å–∞–π—Ç–µ.\n\n"
            "_–°–æ–≤–µ—Ç: ID –∫–Ω–∏–≥–∏ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –∏–∑ URL –Ω–∞ —Å–∞–π—Ç–µ Flibusta._"
        ),
        "search": (
            "üîç *–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫*\n\n"
            "*–ö–æ–º–∞–Ω–¥–∞:* `/search`\n\n"
            "–ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏\n"
            "‚Ä¢ –ò–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∏ –∞–≤—Ç–æ—Ä–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π\n\n"
            "*–ü—Ä–∏–º–µ—Ä:*\n"
            "```\n"
            "1984\n"
            "–û—Ä—É—ç–ª–ª\n"
            "```\n\n"
            "_–≠—Ç–æ —Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã._"
        )
    }
    
    message = help_messages.get(help_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é"
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=message,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )


async def find_book_by_id(book_id, update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–Ω–∏–≥–µ –ø–æ ID"""
    logger.info(
        msg="find book by id",
        extra={
            "command": "find_book_by_id",
            "user_id": update.effective_user.id,
            "user_name": update.effective_user.name,
            "book_id": book_id,
        }
    )

    mes = await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text="‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∑–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ..."
    )
    
    try:
        book = flib.get_book_by_id(book_id)
        
        if not book:
            await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )
            return
        
        await show_book_details(book, update, context, mes)
        
    except Exception as e:
        await handle_error(e, update, context, mes)


async def get_book_by_format(data: str, update: Update, context: CallbackContext):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    logger.info(
        msg="get book by format",
        extra={
            "command": "get_book_by_format",
            "user_id": update.effective_user.id,
            "user_name": update.effective_user.name,
            "data": data,
        }
    )

    mes = await context.bot.send_message(
        chat_id=update.effective_chat.id, 
        text="‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Å–∫–∞—á–∏–≤–∞—é –∫–Ω–∏–≥—É..."
    )

    book_id, book_format = data.split("+")
    book = flib.get_book_by_id(book_id)

    b_content, b_filename = flib.download_book(book, book_format)

    if b_filename:
        await context.bot.send_document(
            chat_id=update.effective_chat.id, 
            document=b_content, 
            filename=b_filename,
            caption=f"‚úÖ –ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!\nüìñ {book.title}\n‚úçÔ∏è {book.author}"
        )
        await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)
    else:
        logger.error(
            msg="download error",
            extra={
                "command": "get_book_by_format",
                "user_id": update.effective_user.id,
                "user_name": update.effective_user.name,
                "data": data,
            }
        )
        await context.bot.deleteMessage(chat_id=mes.chat_id, message_id=mes.message_id)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∫–Ω–∏–≥–∏.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."
        )


@check_access
async def help_command(update: Update, context: CallbackContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    await start_callback(update, context)


@check_access
async def show_stats(update: Update, _: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if ALLOWED_USERS and user_id == ALLOWED_USERS[0]:
        if not usage_stats:
            await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞")
            return
        
        stats_text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞*\n\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
        sorted_stats = sorted(usage_stats.items(), key=lambda x: x[1], reverse=True)
        
        stats_text += "*–¢–æ–ø –∫–æ–º–∞–Ω–¥:*\n"
        for i, (command, count) in enumerate(sorted_stats[:10], 1):
            stats_text += f"{i}. `{command}`: {count} —Ä–∞–∑\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_searches = sum(usage_stats.values())
        unique_users = len(search_history)
        
        stats_text += f"\n*–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {total_searches}\n"
        stats_text += f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}\n"
        stats_text += f"‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(ALLOWED_USERS)}\n"
        
        await update.message.reply_text(
            stats_text,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@check_access
async def list_allowed_users(update: Update, _: CallbackContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–≤—ã–º –≤ —Å–ø–∏—Å–∫–µ (–∞–¥–º–∏–Ω–æ–º)
    if ALLOWED_USERS and user_id == ALLOWED_USERS[0]:
        if ALLOWED_USERS:
            users_list = "\n".join([f"‚Ä¢ {user}" for user in ALLOWED_USERS])
            await update.message.reply_text(
                f"üìã *–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n{users_list}\n\n"
                f"_–í—Å–µ–≥–æ: {len(ALLOWED_USERS)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π_",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text("‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç. –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö.")
    else:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
